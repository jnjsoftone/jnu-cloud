import*as t from"dotenv";import o from"fs";import*as e from"path";t.config();let r="https://api.github.com",n=t=>Buffer.from(t).toString("base64"),i=t=>Buffer.from(t,"base64").toString("utf-8"),a=async(t,o,e,i="Update JSON file")=>{let a=`${r}/repos/${e.owner}/${e.repo}/contents/${t}`;console.log(`@@@@ uploadJsonToGithub srcUrl: ${a}`);try{let t;try{let o=await fetch(a,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});o.ok&&(t=(await o.json()).sha)}catch(t){}let r=await fetch(a,{method:"PUT",headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:i,content:n(JSON.stringify(o,null,2)),sha:t})});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);return await r.json()}catch(t){throw console.error("Error uploading to GitHub:",t),t}},s=async(t,o)=>{try{let e=await fetch(`${r}/repos/${o.owner}/${o.repo}/contents/${t}`,{headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"}});if(!e.ok)throw Error(`GitHub API error: ${e.statusText}`);let n=await e.json(),a=i(n.content);return JSON.parse(a)}catch(t){throw console.error("Error reading from GitHub:",t),t}},l=async(t="",o)=>{try{let e=await fetch(`${r}/repos/${o.owner}/${o.repo}/contents/${t}`,{headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"}});if(!e.ok)throw Error(`GitHub API error: ${e.statusText}`);return(await e.json()).filter(t=>"file"===t.type)}catch(t){throw console.error("Error listing files from GitHub:",t),t}},c=async(t,o,e="Delete file")=>{try{let n=await fetch(`${r}/repos/${o.owner}/${o.repo}/contents/${t}`,{headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"}});if(!n.ok)throw Error(`GitHub API error: ${n.statusText}`);let i=await n.json(),a=await fetch(`${r}/repos/${o.owner}/${o.repo}/contents/${t}`,{method:"DELETE",headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:e,sha:i.sha})});if(!a.ok)throw Error(`GitHub API error: ${a.statusText}`);return await a.json()}catch(t){throw console.error("Error deleting file from GitHub:",t),t}},h=async(t,n,i)=>{try{o.existsSync(n)||o.mkdirSync(n,{recursive:!0});let a=async s=>{let l=`${r}/repos/${i.owner}/${i.repo}/contents/${s}`;console.log(`copyFolderToLocal srcUrl: ${l}`);let c=await fetch(l,{headers:{Authorization:`token ${i.token}`,"Content-Type":"application/json"}});if(!c.ok)throw Error(`GitHub API error: ${c.statusText}`);for(let r of(await c.json())){let i=e.join(n,r.path.replace(t,""));if("dir"===r.type)o.existsSync(i)||o.mkdirSync(i,{recursive:!0}),await a(r.path);else if("file"===r.type){let t=await fetch(r.download_url);if(!t.ok)throw Error(`Failed to download file: ${r.path}`);let e=await t.arrayBuffer();o.writeFileSync(i,Buffer.from(e))}}};await a(t),console.log(`Successfully copied GitHub folder '${t}' to local folder '${n}'`)}catch(t){throw console.error("Error copying folder from GitHub:",t),t}},p=async(t,o,e,i="Save JSON file")=>{let a=`${r}/repos/${e.owner}/${e.repo}/contents/${t}`;console.log(`@@@@ saveJsonToGithub srcUrl: ${a}`);try{let t;try{let o=await fetch(a,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});o.ok&&(t=(await o.json()).sha)}catch(t){}let r=await fetch(a,{method:"PUT",headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:i,content:n(JSON.stringify(o,null,2)),sha:t})});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);return await r.json()}catch(t){throw console.error("Error saving to GitHub:",t),t}};export{a as uploadJsonToGithub,s as readJsonFromGithub,l as listFilesInDirectory,c as deleteFileFromGithub,h as copyFolderToLocal,p as saveJsonToGithub};