"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(e,t){for(var n in t)Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}(exports,{createGitHubAccount:function(){return $},deleteFile:function(){return h},deleteGitHubAccount:function(){return C},downloadFile:function(){return p},getCurrentUser:function(){return d},getGitHubAccount:function(){return O},getGitHubAccounts:function(){return S},getSupabase:function(){return r},initSupabase:function(){return n},insert:function(){return i},listFiles:function(){return m},loadJsonFromStorage:function(){return b},remove:function(){return c},saveJsonToStorage:function(){return y},select:function(){return a},selectOne:function(){return u},signIn:function(){return f},signOut:function(){return w},signUp:function(){return l},sqlCreateTable:function(){return N},subscribe:function(){return E},update:function(){return o},updateGitHubAccount:function(){return T},uploadFile:function(){return g},upsert:function(){return s},upsertGitHubAccounts:function(){return I}});const e=require("@supabase/supabase-js");let t=null;const n=n=>t=(0,e.createClient)(n.url,n.anonKey),r=()=>{if(!t)throw Error("Supabase client is not initialized");return t},a=async(e,t={})=>{let{page:n=1,limit:a=10,orderBy:u,filters:i}=t,o=r().from(e).select("*");if(i&&i.forEach(({column:e,operator:t,value:n})=>{o=o.filter(e,t,n)}),u&&(o=o.order(u.column,{ascending:u.ascending??!0})),n&&a){let e=(n-1)*a;o=o.range(e,e+a-1)}let{data:c,error:s}=await o;if(s)throw s;return c},u=async(e,t)=>{let{data:n,error:a}=await r().from(e).select("*").eq("id",t).single();if(a)throw a;return n},i=async(e,t)=>{let{data:n,error:a}=await r().from(e).insert(t).select();if(a)throw a;return n},o=async(e,t,n)=>{let{data:a,error:u}=await r().from(e).update(n).eq("id",t).select();if(u)throw u;return a},c=async(e,t)=>{let{error:n}=await r().from(e).delete().eq("id",t);if(n)throw n;return!0},s=async(e,t,n)=>{let{data:a,error:u}=await r().from(e).upsert(t,{onConflict:n.join(",")}).select();if(u)throw u;return a},l=async(e,t)=>{let{data:n,error:a}=await r().auth.signUp({email:e,password:t});if(a)throw a;return n},f=async(e,t)=>{let{data:n,error:a}=await r().auth.signInWithPassword({email:e,password:t});if(a)throw a;return n},w=async()=>{let{error:e}=await r().auth.signOut();if(e)throw e;return!0},d=async()=>{let{data:{user:e},error:t}=await r().auth.getUser();if(t)throw t;return e},g=async(e,t,n,a={})=>{let{data:u,error:i}=await r().storage.from(e).upload(t,n,{upsert:a.upsert??!1,cacheControl:a.cacheControl??"3600"});if(i)throw i;return u},p=async(e,t)=>{let{data:n,error:a}=await r().storage.from(e).download(t);if(a)throw a;return n},h=async(e,t)=>{let{error:n}=await r().storage.from(e).remove([t]);if(n)throw n;return!0},m=async(e,t="")=>{let{data:n,error:a}=await r().storage.from(e).list(t);if(a)throw a;return n},y=async(e,t,n)=>{let r=new Blob([JSON.stringify(n)],{type:"application/json"});return await g(e,t,r,{upsert:!0})},b=async(e,t)=>{let n=await p(e,t);return JSON.parse(await n.text())},E=(e,t)=>r().channel(`${e}-changes`).on("postgres_changes",{event:"*",schema:"public",table:e},e=>t(e)).subscribe(),S=async(e={})=>await a("github_accounts",e),O=async e=>{let{data:t,error:n}=await r().from("github_accounts").select("*").eq("username",e).single();if(n)throw n;return t},$=async e=>{let{data:t,error:n}=await r().from("github_accounts").insert({...e,created_at:new Date().toISOString(),updated_at:new Date().toISOString()}).select().single();if(n)throw n;return t},T=async(e,t)=>{let{data:n,error:a}=await r().from("github_accounts").update({...t,updated_at:new Date().toISOString()}).eq("username",e).select().single();if(a)throw a;return n},C=async e=>{let{error:t}=await r().from("github_accounts").delete().eq("username",e);if(t)throw t;return!0},I=async e=>{let t=new Date().toISOString(),{data:n,error:a}=await r().from("github_accounts").upsert(e.map(e=>({...e,updated_at:t,created_at:t})),{onConflict:"username",ignoreDuplicates:!1}).select();if(a)throw a;return n},N=(e,t)=>{let n=[],r=`CREATE TABLE IF NOT EXISTS ${e.name} (
`;if(r+=e.columns.map(e=>{let t=`  "${e.name}" ${e.type}`;return e.primaryKey&&(t+=" PRIMARY KEY"),e.unique&&(t+=" UNIQUE"),e.nullable||(t+=" NOT NULL"),void 0!==e.defaultValue&&(t+=` DEFAULT ${e.defaultValue}`),e.check&&(t+=` CHECK (${e.check})`),e.foreignKey&&(t+=` REFERENCES ${e.foreignKey.table}(${e.foreignKey.column})`,e.foreignKey.onDelete&&(t+=` ON DELETE ${e.foreignKey.onDelete}`),e.foreignKey.onUpdate&&(t+=` ON UPDATE ${e.foreignKey.onUpdate}`)),t}).join(",\n"),r+="\n);",n.push(r),e.indexes)for(let t of e.indexes){let r=`CREATE${t.unique?" UNIQUE":""} INDEX IF NOT EXISTS "${t.name}" ON ${e.name} (${t.columns.map(e=>`"${e}"`).join(", ")});`;n.push(r)}return t&&["select","insert","update","delete"].forEach(r=>{let a=t[r];a?.enabled&&a.roles.forEach(t=>{let u=`GRANT ${r.toUpperCase()} ON ${e.name} TO "${t}"`;a.condition&&(u+=` WITH CHECK (${a.condition})`),u+=";",n.push(u)})}),n};