"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),!function(t,e){for(var r in e)Object.defineProperty(t,r,{enumerable:!0,get:e[r]})}(exports,{copyFolderToLocal:function(){return p},deleteFileFromGithub:function(){return l},listFilesInDirectory:function(){return f},readJsonFromGithub:function(){return c},uploadJsonToGithub:function(){return u}});const t=/*#__PURE__*/function(t,e){if(t&&t.__esModule)return t;if(null===t||"object"!=typeof t&&"function"!=typeof t)return{default:t};var r=n(e);if(r&&r.has(t))return r.get(t);var o={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if("default"!==a&&Object.prototype.hasOwnProperty.call(t,a)){var s=i?Object.getOwnPropertyDescriptor(t,a):null;s&&(s.get||s.set)?Object.defineProperty(o,a,s):o[a]=t[a]}return o.default=t,r&&r.set(t,o),o}(require("dotenv")),e=/*#__PURE__*/o(require("fs")),r=/*#__PURE__*/o(require("path"));function o(t){return t&&t.__esModule?t:{default:t}}function n(t){if("function"!=typeof WeakMap)return null;var e=new WeakMap,r=new WeakMap;return(n=function(t){return t?r:e})(t)}t.config();const i="https://api.github.com",a=t=>Buffer.from(t).toString("base64"),s=t=>Buffer.from(t,"base64").toString("utf-8"),u=async(t,e,r,o="Update JSON file")=>{try{let n;try{let e=await fetch(`${i}/repos/${r.owner}/${r.repo}/contents/${t}`,{headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"}});e.ok&&(n=(await e.json()).sha)}catch(t){}let s=await fetch(`${i}/repos/${r.owner}/${r.repo}/contents/${t}`,{method:"PUT",headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:o,content:a(JSON.stringify(e,null,2)),sha:n})});if(!s.ok)throw Error(`GitHub API error: ${s.statusText}`);return await s.json()}catch(t){throw console.error("Error uploading to GitHub:",t),t}},c=async(t,e)=>{try{let r=await fetch(`${i}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);let o=await r.json(),n=s(o.content);return JSON.parse(n)}catch(t){throw console.error("Error reading from GitHub:",t),t}},f=async(t="",e)=>{try{let r=await fetch(`${i}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);return(await r.json()).filter(t=>"file"===t.type)}catch(t){throw console.error("Error listing files from GitHub:",t),t}},l=async(t,e,r="Delete file")=>{try{let o=await fetch(`${i}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`GitHub API error: ${o.statusText}`);let n=await o.json(),a=await fetch(`${i}/repos/${e.owner}/${e.repo}/contents/${t}`,{method:"DELETE",headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:r,sha:n.sha})});if(!a.ok)throw Error(`GitHub API error: ${a.statusText}`);return await a.json()}catch(t){throw console.error("Error deleting file from GitHub:",t),t}},p=async(t,o,n)=>{try{e.default.existsSync(o)||e.default.mkdirSync(o,{recursive:!0});let a=async s=>{let u=await fetch(`${i}/repos/${n.owner}/${n.repo}/contents/${s}`,{headers:{Authorization:`token ${n.token}`,"Content-Type":"application/json"}});if(!u.ok)throw Error(`GitHub API error: ${u.statusText}`);for(let n of(await u.json())){let i=r.default.join(o,n.path.replace(t,""));if("dir"===n.type)e.default.existsSync(i)||e.default.mkdirSync(i,{recursive:!0}),await a(n.path);else if("file"===n.type){let t=await fetch(n.download_url);if(!t.ok)throw Error(`Failed to download file: ${n.path}`);let r=await t.arrayBuffer();e.default.writeFileSync(i,Buffer.from(r))}}};await a(t),console.log(`Successfully copied GitHub folder '${t}' to local folder '${o}'`)}catch(t){throw console.error("Error copying folder from GitHub:",t),t}};