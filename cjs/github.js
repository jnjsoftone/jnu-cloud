"use strict";var t;Object.defineProperty(exports,"__esModule",{value:!0}),!function(t,e){for(var o in e)Object.defineProperty(t,o,{enumerable:!0,get:e[o]})}(exports,{copyFolderToLocal:function(){return h},deleteFileFromGithub:function(){return p},listFilesInDirectory:function(){return f},readJsonFromGithub:function(){return u},saveJsonToGithub:function(){return y},uploadJsonToGithub:function(){return l}});const e=/*#__PURE__*/i(require("dotenv")),o=(t=require("fs"))&&t.__esModule?t:{default:t},r=/*#__PURE__*/i(require("path"));function n(t){if("function"!=typeof WeakMap)return null;var e=new WeakMap,o=new WeakMap;return(n=function(t){return t?o:e})(t)}function i(t,e){if(!e&&t&&t.__esModule)return t;if(null===t||"object"!=typeof t&&"function"!=typeof t)return{default:t};var o=n(e);if(o&&o.has(t))return o.get(t);var r={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if("default"!==a&&Object.prototype.hasOwnProperty.call(t,a)){var s=i?Object.getOwnPropertyDescriptor(t,a):null;s&&(s.get||s.set)?Object.defineProperty(r,a,s):r[a]=t[a]}return r.default=t,o&&o.set(t,r),r}e.config();const a="https://api.github.com",s=t=>Buffer.from(t).toString("base64"),c=t=>Buffer.from(t,"base64").toString("utf-8"),l=async(t,e,o,r="Update JSON file")=>{let n=`${a}/repos/${o.owner}/${o.repo}/contents/${t}`;console.log(`@@@@ uploadJsonToGithub srcUrl: ${n}`);try{let t;try{let e=await fetch(n,{headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"}});e.ok&&(t=(await e.json()).sha)}catch(t){}let i=await fetch(n,{method:"PUT",headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:r,content:s(JSON.stringify(e,null,2)),sha:t})});if(!i.ok)throw Error(`GitHub API error: ${i.statusText}`);return await i.json()}catch(t){throw console.error("Error uploading to GitHub:",t),t}},u=async(t,e)=>{try{let o=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`GitHub API error: ${o.statusText}`);let r=await o.json(),n=c(r.content);return JSON.parse(n)}catch(t){throw console.error("Error reading from GitHub:",t),t}},f=async(t="",e)=>{try{let o=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`GitHub API error: ${o.statusText}`);return(await o.json()).filter(t=>"file"===t.type)}catch(t){throw console.error("Error listing files from GitHub:",t),t}},p=async(t,e,o="Delete file")=>{try{let r=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);let n=await r.json(),i=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{method:"DELETE",headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:o,sha:n.sha})});if(!i.ok)throw Error(`GitHub API error: ${i.statusText}`);return await i.json()}catch(t){throw console.error("Error deleting file from GitHub:",t),t}},h=async(t,e,n)=>{try{o.default.existsSync(e)||o.default.mkdirSync(e,{recursive:!0});let i=async s=>{let c=`${a}/repos/${n.owner}/${n.repo}/contents/${s}`;console.log(`copyFolderToLocal srcUrl: ${c}`);let l=await fetch(c,{headers:{Authorization:`token ${n.token}`,"Content-Type":"application/json"}});if(!l.ok)throw Error(`GitHub API error: ${l.statusText}`);for(let n of(await l.json())){let a=r.join(e,n.path.replace(t,""));if("dir"===n.type)o.default.existsSync(a)||o.default.mkdirSync(a,{recursive:!0}),await i(n.path);else if("file"===n.type){let t=await fetch(n.download_url);if(!t.ok)throw Error(`Failed to download file: ${n.path}`);let e=await t.arrayBuffer();o.default.writeFileSync(a,Buffer.from(e))}}};await i(t),console.log(`Successfully copied GitHub folder '${t}' to local folder '${e}'`)}catch(t){throw console.error("Error copying folder from GitHub:",t),t}},y=async(t,e,o,r="Save JSON file")=>{let n=`${a}/repos/${o.owner}/${o.repo}/contents/${t}`;console.log(`@@@@ saveJsonToGithub srcUrl: ${n}`);try{let t;try{let e=await fetch(n,{headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"}});e.ok&&(t=(await e.json()).sha)}catch(t){}let i=await fetch(n,{method:"PUT",headers:{Authorization:`token ${o.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:r,content:s(JSON.stringify(e,null,2)),sha:t})});if(!i.ok)throw Error(`GitHub API error: ${i.statusText}`);return await i.json()}catch(t){throw console.error("Error saving to GitHub:",t),t}};