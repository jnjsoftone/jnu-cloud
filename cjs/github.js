"use strict";var t;Object.defineProperty(exports,"__esModule",{value:!0}),!function(t,e){for(var r in e)Object.defineProperty(t,r,{enumerable:!0,get:e[r]})}(exports,{copyFolderToLocal:function(){return h},deleteFileFromGithub:function(){return p},listFilesInDirectory:function(){return f},readJsonFromGithub:function(){return l},uploadJsonToGithub:function(){return u}});const e=/*#__PURE__*/i(require("dotenv")),r=(t=require("fs"))&&t.__esModule?t:{default:t},o=/*#__PURE__*/i(require("path"));function n(t){if("function"!=typeof WeakMap)return null;var e=new WeakMap,r=new WeakMap;return(n=function(t){return t?r:e})(t)}function i(t,e){if(!e&&t&&t.__esModule)return t;if(null===t||"object"!=typeof t&&"function"!=typeof t)return{default:t};var r=n(e);if(r&&r.has(t))return r.get(t);var o={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if("default"!==a&&Object.prototype.hasOwnProperty.call(t,a)){var s=i?Object.getOwnPropertyDescriptor(t,a):null;s&&(s.get||s.set)?Object.defineProperty(o,a,s):o[a]=t[a]}return o.default=t,r&&r.set(t,o),o}e.config();const a="https://api.github.com",s=t=>Buffer.from(t).toString("base64"),c=t=>Buffer.from(t,"base64").toString("utf-8"),u=async(t,e,r,o="Update JSON file")=>{try{let n;try{let e=await fetch(`${a}/repos/${r.owner}/${r.repo}/contents/${t}`,{headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"}});e.ok&&(n=(await e.json()).sha)}catch(t){}let i=await fetch(`${a}/repos/${r.owner}/${r.repo}/contents/${t}`,{method:"PUT",headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:o,content:s(JSON.stringify(e,null,2)),sha:n})});if(!i.ok)throw Error(`GitHub API error: ${i.statusText}`);return await i.json()}catch(t){throw console.error("Error uploading to GitHub:",t),t}},l=async(t,e)=>{try{let r=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);let o=await r.json(),n=c(o.content);return JSON.parse(n)}catch(t){throw console.error("Error reading from GitHub:",t),t}},f=async(t="",e)=>{try{let r=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!r.ok)throw Error(`GitHub API error: ${r.statusText}`);return(await r.json()).filter(t=>"file"===t.type)}catch(t){throw console.error("Error listing files from GitHub:",t),t}},p=async(t,e,r="Delete file")=>{try{let o=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`GitHub API error: ${o.statusText}`);let n=await o.json(),i=await fetch(`${a}/repos/${e.owner}/${e.repo}/contents/${t}`,{method:"DELETE",headers:{Authorization:`token ${e.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:r,sha:n.sha})});if(!i.ok)throw Error(`GitHub API error: ${i.statusText}`);return await i.json()}catch(t){throw console.error("Error deleting file from GitHub:",t),t}},h=async(t,e,n)=>{try{r.default.existsSync(e)||r.default.mkdirSync(e,{recursive:!0});let i=async s=>{let c=await fetch(`${a}/repos/${n.owner}/${n.repo}/contents/${s}`,{headers:{Authorization:`token ${n.token}`,"Content-Type":"application/json"}});if(!c.ok)throw Error(`GitHub API error: ${c.statusText}`);for(let n of(await c.json())){let a=o.join(e,n.path.replace(t,""));if("dir"===n.type)r.default.existsSync(a)||r.default.mkdirSync(a,{recursive:!0}),await i(n.path);else if("file"===n.type){let t=await fetch(n.download_url);if(!t.ok)throw Error(`Failed to download file: ${n.path}`);let e=await t.arrayBuffer();r.default.writeFileSync(a,Buffer.from(e))}}};await i(t),console.log(`Successfully copied GitHub folder '${t}' to local folder '${e}'`)}catch(t){throw console.error("Error copying folder from GitHub:",t),t}};