"use strict";function t(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,o=new WeakMap;return(t=function(t){return t?o:r})(e)}Object.defineProperty(exports,"__esModule",{value:!0}),!function(t,e){for(var r in e)Object.defineProperty(t,r,{enumerable:!0,get:e[r]})}(exports,{deleteFileFromGithub:function(){return s},listFilesInDirectory:function(){return a},readJsonFromGithub:function(){return i},uploadJsonToGithub:function(){return n}}),/*#__PURE__*/(function(e,r){if(e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var o=t(r);if(o&&o.has(e))return o.get(e);var n={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&Object.prototype.hasOwnProperty.call(e,a)){var s=i?Object.getOwnPropertyDescriptor(e,a):null;s&&(s.get||s.set)?Object.defineProperty(n,a,s):n[a]=e[a]}return n.default=e,o&&o.set(e,n),n})(require("dotenv")).config();const e="https://api.github.com",r=t=>Buffer.from(t).toString("base64"),o=t=>Buffer.from(t,"base64").toString("utf-8"),n=async(t,o,n,i="Update JSON file")=>{try{let a;try{let r=await fetch(`${e}/repos/${n.owner}/${n.repo}/contents/${t}`,{headers:{Authorization:`token ${n.token}`,"Content-Type":"application/json"}});r.ok&&(a=(await r.json()).sha)}catch(t){}let s=await fetch(`${e}/repos/${n.owner}/${n.repo}/contents/${t}`,{method:"PUT",headers:{Authorization:`token ${n.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:i,content:r(JSON.stringify(o,null,2)),sha:a})});if(!s.ok)throw Error(`GitHub API error: ${s.statusText}`);return await s.json()}catch(t){throw console.error("Error uploading to GitHub:",t),t}},i=async(t,r)=>{try{let n=await fetch(`${e}/repos/${r.owner}/${r.repo}/contents/${t}`,{headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"}});if(!n.ok)throw Error(`GitHub API error: ${n.statusText}`);let i=await n.json(),a=o(i.content);return JSON.parse(a)}catch(t){throw console.error("Error reading from GitHub:",t),t}},a=async(t="",r)=>{try{let o=await fetch(`${e}/repos/${r.owner}/${r.repo}/contents/${t}`,{headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"}});if(!o.ok)throw Error(`GitHub API error: ${o.statusText}`);return(await o.json()).filter(t=>"file"===t.type)}catch(t){throw console.error("Error listing files from GitHub:",t),t}},s=async(t,r,o="Delete file")=>{try{let n=await fetch(`${e}/repos/${r.owner}/${r.repo}/contents/${t}`,{headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"}});if(!n.ok)throw Error(`GitHub API error: ${n.statusText}`);let i=await n.json(),a=await fetch(`${e}/repos/${r.owner}/${r.repo}/contents/${t}`,{method:"DELETE",headers:{Authorization:`token ${r.token}`,"Content-Type":"application/json"},body:JSON.stringify({message:o,sha:i.sha})});if(!a.ok)throw Error(`GitHub API error: ${a.statusText}`);return await a.json()}catch(t){throw console.error("Error deleting file from GitHub:",t),t}};